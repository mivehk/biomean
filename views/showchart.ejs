<!DOCTYPE html>
<html lang="us">
<head>
<meta charset="utf-8"/>
<title>Save a life!</title> 
<link rel="stylesheet" type="text/css" href="/css/index.css"/>  
<script src="https://code.jscharting.com/latest/jscharting.js"></script> 
</head>
<body> 
    <BMP-form method="" action="" >
        <a class="update" href="/" > Back To Main Page </a>       
   </BMP-form>
    <div id="chartDiv" style="width: 100%; height: 300px;"></div>
    <div id="chartDiv2" style="width: 100%; height: 300px;"></div>
    <div id="chartDiv3" style="width: 100%; height: 300px;"></div>
    <h1>Save a Life!</h1>
</body>
<script src="https://code.jscharting.com/latest/jscharting.js"></script> 
<script> 
     //apparently fetch relative path to parent also searched inside public without meesing with url
    JSC.fetch('../testfile.json')
    .then(response => response.json() )
    .then( function(json) {let series=jsonToSeries(json);
        renderChart(series);})
    .catch(function (error){
        console.log(error)
    }); 

    JSC.fetch("../testfile.json")    
    .then(response => response.json())    
    .then( function(json) {let series2=jsonToSeries2(json);
        renderChart2(series2);})
    .catch(function (error){
        console.log(error)
    });

    JSC.fetch("../testfile.json")    
    .then(response => response.json() )   
    .then( function(json) {let series3=jsonToSeries3(json);
        renderChart3(series3);})    
    .catch(function (error){
        console.log(error)
    });
    
    function jsonToSeries(data){
       
        console.log(data);
        let p001= [];  
        data.forEach(function (row){
                p001.push({x: row.testDate, y: row.creatinine});             
        });
            return[
                {name: 'This Patient', points: p001}
            ];
    }
    function jsonToSeries2(data){
        //const CreatinineFactor = 'creatinine';
        //let dataAsJson2 = JSC.csv2Json(text);
        let p002 = [];
    
        data.forEach(function (row){
                p002.push({x: row.testDate, y: row.eGfr});
            
        });
            return[
                {name: 'This Patient', points: p002},
            ];
    }
    function jsonToSeries3(data){
        //const CreatinineFactor = 'creatinine';
        //let dataAsJson3 = JSC.csv2Json(text);
        let p003 = [];
    
        data.forEach(function (row){
                p003.push({x: row.testDate, y: row.glucose});
        });
            return[
                {name: 'This Patient', points: p003},
            ];
    }

 function renderChart(series){
     JSC.Chart('chartDiv',{
        title_label_text: 'Creatinine values as Pathogenesis for Ischemic Stroke',
    annotations: [{
        label_text: 'Source: Biomean! Save a life!',
        position: 'bottom center'
    }],
    legend_visible: false,
    xAxis_crosshair_enabled: true,
    defaultSeries_firstPoint_label_text: '<b>%seriesName</b>',
    defaultPoint_tooltip: '%seriesName <b>%yValue</b> mg/dl',
    series: series
     });
 }   
 function renderChart2(series2){
     JSC.Chart("chartDiv2",{
        title_label_text: 'eGFR values as Pathogenesis for Ischemic Stroke',
    annotations: [{
        label_text: 'Source: Biomean! Save a life!',
        position: 'bottom center'
    }],
    legend_visible: false,
    xAxis_crosshair_enabled: true,
    defaultSeries_firstPoint_label_text: '<b>%seriesName</b>',
    defaultPoint_tooltip: '%seriesName <b>%yValue</b> ml/min/1.73m2',
    series: series2
     });
 } 
 function renderChart3(series3){
     JSC.Chart('chartDiv3',{
        title_label_text: 'Glucose values as Pathogenesis for Ischemic Stroke',
    annotations: [{
        label_text: 'Source: Biomean! Save a life!',
        position: 'bottom center'
    }],
    legend_visible: false,
    xAxis_crosshair_enabled: true,
    defaultSeries_firstPoint_label_text: '<b>%seriesName</b>',
    defaultPoint_tooltip: '%seriesName <b>%yValue</b> mg/dl',
    series: series3
     });
 } 
  </script> 
 </html>